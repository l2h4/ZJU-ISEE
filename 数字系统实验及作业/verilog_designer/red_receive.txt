module red_receive(
    input               clk,           
    input               rst_n,        
    input               remote_in,    
    output  reg [7:0]   data,         
    output  reg         led    
);
 
parameter  IDLE                 = 6'b00000;
parameter  START_9MS            = 6'b00001;
parameter  START_4_5MS_OR_2_5MS = 6'b00010;
parameter  START_RECEIVE_DATA   = 6'b00011;
parameter  START_REPEAT         = 6'b00100;
 
reg [5:0] state_c;
reg [5:0] state_n;             
wire sidle29ms_start;           
reg  s9ms2s4_5ms_or_2_5ms_start;
reg  s9ms2idle_start;           
reg  s4_5ms2receive_data_start; 
reg  s4_5ms2repeat_code_start;  
reg  s4_5ms2idle;              
wire sreceive_data2idle_start; 
wire srepeat2idle_start;     
 
//接收数据
reg [31:0] receive_data;       //接收的数据
reg [6:0] cnt;
wire add_cnt;
wire end_cnt;
 
//上升沿，下降沿
wire  pos_remote_in,neg_remote_in;
reg   remote_in_d0,remote_in_d1;
 
//led控制
reg led_flag;
wire add_cnt1;
wire end_cnt1;
reg [24:0]   cnt1;
//计时
reg  [20:0]  neg_cnt,pos_cnt;
 
//20ns 50个是1us=1000*50
//9ms
parameter TIME_10MS   = 21'd1000_000;  //50000*10
parameter TIME_8MS    = 21'd800_000; 
//4.5ms
parameter TIME_4MS    = 21'd400_000;  
parameter TIME_5MS    = 21'd500_000;
//2.25 逻辑'1'
parameter TIME_1_4MS  = 21'd140_000;  
parameter TIME_3MS    = 21'd300_000;
 
 
//上升沿检测,下降沿检测,很常规的一种方法
assign  pos_remote_in = (~remote_in_d1) & remote_in_d0;    //上升沿检测,如果检测到上升沿，有0到1，之后下个周期为0
assign  neg_remote_in =  remote_in_d1 & (~remote_in_d0);   //下降沿
 
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        remote_in_d0<=1'b0;
        remote_in_d1<=1'b0;
    end
    else  begin
        remote_in_d0<=remote_in;
        remote_in_d1<=remote_in_d0;
    end
end
 
//状态机初值
always@(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
        state_c <= IDLE;
    end
    else begin
        state_c <= state_n;
    end
end
 
//在接收数据的各种状态
always@(*)begin
    case(state_c)
        IDLE:begin
            if(sidle29ms_start)begin   //9ms的下降沿开始，准备开始计数
                state_n = START_9MS;
            end
            else begin
                state_n = state_c;
            end
        end
        START_9MS:begin
            if(s9ms2s4_5ms_or_2_5ms_start)begin
                state_n = START_4_5MS_OR_2_5MS;
            end
            else if(s9ms2idle_start)begin
                state_n = IDLE;  //计数出错了
            end
            else begin
                state_n = state_c;
            end
        end
         START_4_5MS_OR_2_5MS:begin
            if(s4_5ms2receive_data_start)begin
                state_n = START_RECEIVE_DATA; //开始接收数据
            end
            else if(s4_5ms2repeat_code_start)begin
                state_n = START_REPEAT;  //重复码
            end
            else if(s4_5ms2idle)begin
                state_n = IDLE;  //计数出错了
            end
            else begin
                state_n = state_c;
            end
        end
        START_RECEIVE_DATA:begin
            if(sreceive_data2idle_start)begin
                state_n = IDLE;  //回到空闲状态
            end
            else begin
                state_n = state_c;
            end
        end
		  START_REPEAT:begin
            if(srepeat2idle_start)begin
                state_n = IDLE;  //回到空闲状态
            end
            else begin
                state_n = state_c;
            end
        end
        default:begin
            state_n = IDLE;
        end
    endcase
end
 
assign sidle29ms_start             =state_c==IDLE               && neg_remote_in;   //检测到下降沿，准备开始对9ms低电平计时
assign sreceive_data2idle_start    =state_c==START_RECEIVE_DATA && end_cnt;         //40位数据接收完成
assign srepeat2idle_start          =state_c==START_REPEAT       && pos_remote_in;   //重复码结束标志位
//9MS
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        s9ms2s4_5ms_or_2_5ms_start<=0;
        s9ms2idle_start<=0;
    end
    else if(state_c==START_9MS && pos_remote_in) begin  //下降沿开始接收数据
        if(neg_cnt>TIME_8MS && neg_cnt<TIME_10MS) begin
           s9ms2s4_5ms_or_2_5ms_start<=1;
        end
        else begin
            s9ms2idle_start<=1;
        end 
    end
    else begin
         s9ms2s4_5ms_or_2_5ms_start<=0;
         s9ms2idle_start<=0;
    end
end
 
//4.5MS
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        s4_5ms2receive_data_start<=0;
        s4_5ms2repeat_code_start<=0;
        s4_5ms2idle<=0;
    end
    else if(state_c==START_4_5MS_OR_2_5MS && neg_remote_in) begin  //下降沿开始接收数据
        if(pos_cnt>TIME_4MS&&pos_cnt<TIME_5MS) begin
              s4_5ms2receive_data_start<=1;
        end
        else if(pos_cnt>TIME_1_4MS&&pos_cnt<TIME_3MS)begin
             s4_5ms2repeat_code_start<=1;
        end
        else begin
             s4_5ms2idle<=1;
        end 
    end
    else begin
        s4_5ms2receive_data_start<=0;
        s4_5ms2repeat_code_start<=0;
        s4_5ms2idle<=0;
    end
end
 
///////////////////////////////////接收数据//////////////////////////////////////////////////
//需要接收32位的数据
always @(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
         cnt <= 0;
    end
    else if(add_cnt)begin
        if(end_cnt)
            cnt <= 0;
        else
            cnt <= cnt + 1;
    end
end
 
assign add_cnt = state_c==START_RECEIVE_DATA&&neg_remote_in;  //成功接收一个     
assign end_cnt = add_cnt && cnt==32-1;   
 
//接收数据
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        receive_data<=0;
    end
    else if(state_c==START_RECEIVE_DATA&&neg_remote_in) begin
        if(pos_cnt>TIME_1_4MS&&pos_cnt<TIME_3MS) begin   //在2.25ms左右
              receive_data[cnt]<=1;
        end
        else  begin
             receive_data[cnt]<=0;
        end
    end
end
///////////////////////////////////接收数据////////////////////////////////////////////////////
 
 
//下降沿来了,开始计数，这个方法很好用，专门检测低电平的时间
//当低电平来了，低电平neg_cnt清零并开始自己计数，当上升沿来的那刻，去读neg_cnt这个值，就是低电平的时间
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        neg_cnt<=0;   
    end
    else begin
        if(neg_remote_in) //重新清零
            neg_cnt<=0; 
       else 
            neg_cnt<=neg_cnt+1; 
    end
end
 
//上升沿来了,开始计数，
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        pos_cnt<=0;   
    end
    else begin
        if(pos_remote_in) //重新清零
            pos_cnt<=0; 
       else 
            pos_cnt<=pos_cnt+1; 
    end
end
 
 
 
//下面是做测试用的
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        led_flag<=0;
    end
    else if(srepeat2idle_start) begin
         led_flag<=1;
    end
    else if(end_cnt1) begin
         led_flag<=0;
    end
end
 
always @(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
        cnt1 <= 0;
    end
    else if(add_cnt1)begin
        if(end_cnt1)
            cnt1 <= 0;
        else
            cnt1 <= cnt1 + 1;
    end
end
 
assign add_cnt1 = led_flag ;       
assign end_cnt1 = add_cnt1 && cnt1==10000000-1;  //100ms
 
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
       led<=0;
    end
    else if(led_flag&&cnt1<8000000-1)begin  //80ms亮
      led<=1;
    end
    else begin
      led<=0;
    end
end
 
 
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        data<=0;
    end
    else if(sreceive_data2idle_start) begin
	    data<=receive_data[23:16];  //最后接收的数据,将数据显示到数码管上
    end
end
 
 
endmodule
